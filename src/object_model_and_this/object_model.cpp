#include <iostream>   // 引入输入输出流库
using namespace std;  // 使用标准命名空间

//* 成员变量和成员函数是分开存储的
/*
**只有非静态成员变量才属于类的对象上。**
（**只有非静态成员变量的大小算进类的大小中，其他的都不算**。）
- 非静态成员变量：每个对象都有自己独立的一份存储空间。
- 静态成员变量：属于类本身，所有对象共享同一份数据，不计入单个对象的大小。
-
成员函数（包括静态和非静态）：存储在代码段中，不属于任何对象，也不计入对象的大小。

**空对象的大小是1，为的是区分不同类在内存中的占用位置。**
-
即使一个类没有任何非静态成员变量，编译器也会为其分配至少1字节的空间，以确保不同对象在内存中有唯一的地址。
*/

class Person {
 public:
  int m_A;         // 非静态成员变量，属于类对象上的，其大小会算进类的大小中。
  static int m_B;  // 静态成员变量，不属于类的对象上，不计入类的大小。
  void func() {}   // 非静态成员函数，不属于类的对象上，不计入类的大小。
  static void func2() {}  // 静态成员函数，不属于类的对象上，不计入类的大小。
};

// 静态成员变量需要在类外进行初始化
int Person::m_B = 10;

void test01() {
  Person p;  // 创建一个 Person 对象
  // 空对象占用内存空间为1
  /*
  C++编译器给每个空对象也分配一个字节的空间，为的是区分空对象在内存中的位置。
  每个空对象都应该有一个独一无二的内存地址。
  */
  cout << sizeof(p) << endl;  // 输出对象 p 的大小
}

void test02() {
  Person p;                   // 创建一个 Person 对象
  cout << sizeof(p) << endl;  // 输出对象 p 的大小
}

int main(void) {
  test01();         // 调用测试函数 test01
  test02();         // 调用测试函数 test02
  system("pause");  // 暂停程序，等待用户按键
  return 0;         // 返回0表示程序正常结束
}