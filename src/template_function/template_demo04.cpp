#include <iostream>
using namespace std;

//* 普通函数与函数模板的调用规则
/*
调用规则如下：
1、如果函数模板和普通函数都可以实现，----优先调用普通函数
2、可以----通过空模板参数列表来强制调用函数模板
3、函数模板也可以发生重载
4、如果函数模板可以产生更好的匹配，优先调用函数模板
*/

// 普通函数：接收两个整型参数并输出调用信息
void myPrint(int a, int b) { cout << "调用普通函数" << endl; }

// 函数模板：接收两个同类型参数并输出调用信息
template <class T>
void myPrint(T a, T b) {
  cout << "调用模板" << endl;
}

// 函数模板重载：接收三个同类型参数并输出调用信息
template <class T>
void myPrint(T a, T b, T c) {
  cout << "调用重载模板" << endl;
}

void test01() {
  int a = 10;
  int b = 20;

  // 如果普通函数和函数模板都可以调用，则----优先调用普通函数。
  // 因为编译器会优先匹配非模板函数。
  myPrint(a, b);  // 调用普通函数

  // 通过显式指定空模板参数列表（<>），----强制调用函数模板。
  myPrint<>(a, b);  // 调用模板

  // 调用带有三个参数的重载模板函数。
  // 编译器根据参数数量匹配到对应的重载模板。
  myPrint(a, b, 100);  // 调用重载模板

  // 如果函数模板能够产生更好的匹配，则优先调用函数模板。
  char c1 = 'a';
  char c2 = 'b';

  // 在这里，虽然存在普通函数 myPrint(int, int)，但需要将 char
  // 类型----隐式转换为 int 类型， 而函数模板可以直接匹配 char
  // 类型，因此优先调用函数模板。
  myPrint(c1, c2);  // 调用模板
}

int main(void) {
  test01();         // 调用测试函数
  system("pause");  // 暂停程序，等待用户按键
  return 0;         // 返回程序执行状态
}