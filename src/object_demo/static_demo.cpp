#include <iostream>   // 引入输入输出流库
using namespace std;  // 使用标准命名空间

/*
**静态成员分为**：

- **静态成员变量**
  - **所有对象共享同一份数据**
  - 在编译阶段分配内存
  - 类内声明，类外初始化
- **静态成员函数**
  - **所有成员共享同一个函数**
  - 静态成员函数**只能访问静态成员变量**
*/
class Person {
 public:
  // 静态成员函数
  static void func() {
    age = 100;
    // 静态成员函数只能访问静态成员变量（如 age），不能访问非静态成员变量。
    // 原因：静态成员函数属于类本身，而非某个具体对象，因此无法区分到底是哪个对象的非静态成员变量。
    cout << "static void func调用" << endl;  // 输出静态成员函数被调用的信息
  }

  // 静态成员变量需要在类外进行初始化
  static int age;

  // 静态成员函数也是有访问权限的
 private:
  static void func2() {}
  // 私有的静态成员函数只能在类内部访问，外部无法直接调用。
};

// 静态成员变量的初始化必须在类外进行
int Person::age = 0;

// 测试静态成员函数的两种访问方式
void test01() {
  // 方式一：通过对象访问静态成员函数
  Person p;
  p.func();

  // 方式二：通过类名访问静态成员函数
  Person::func();

  // 以下代码会报错，因为私有的静态成员函数无法通过类名或对象访问
  // Person::func2();
}

int main(void) {
  test01();         // 调用测试函数
  system("pause");  // 暂停程序，等待用户按键
  return 0;         // 返回0表示程序正常结束
}